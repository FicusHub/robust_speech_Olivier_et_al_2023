# ############################################################################
# Model: E2E ASR with CTC
# Encoder: CRDNN model
# Tokens: BPE with unigram
# losses: CTC+ NLL
# Training: Librispeech 960h
# Authors:  Ju-Chieh Chou, Mirco Ravanelli, Abdel Heba, Peter Plantinga,
# Samuele Cornell 2020
# ############################################################################

# Seed needs to be set at top of yaml, before objects with parameters
seed: 1003
__set_seed: !apply:torch.manual_seed [!ref <seed>]
model_name: CTCRNN
root: !PLACEHOLDER
output_folder: !ref <root>/trainings/<model_name>/<seed>
wer_file: !ref <output_folder>/wer.txt
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt
tokenizers_folder: !ref <root>/tokenizers

# Language model (LM) pretraining
# NB: To avoid mismatch, the speech recognizer must be trained with the same
# tokenizer used for LM training. Here, we download everything from the
# speechbrain HuggingFace repository. However, a local path pointing to a
# directory containing the lm.ckpt and tokenizer.ckpt may also be specified
# instead. E.g if you want to use your own LM / tokenizer.

attack_class: null

brain_class: !name:robust_speech.models.ctc.CTCASR
dataset_prepare_fct: !name:robust_speech.data.librispeech.prepare_librispeech
dataio_prepare_fct: !name:robust_speech.data.librispeech.dataio_prepare

pretrained_tokenizer_path: !ref <root>/trainings/wav2vec2-base-960h

# Data files
data_folder: !ref <root>/data/LibriSpeech # e.g, /localscratch/LibriSpeech
csv_folder: !ref <data_folder>/csv
# noise/ris dataset will automatically be downloaded
data_folder_rirs: !ref <data_folder>

train_splits: ["train-clean-100","train-clean-360","train-other-500"]
dev_splits: ["dev-clean"]
test_splits: ["test-clean"]
skip_prep: True
ckpt_interval_minutes: 15 # save checkpoint every N min
train_csv: !ref <data_folder>/csv/train.csv
valid_csv: !ref <data_folder>/csv/dev-clean.csv
test_csv:
   - !ref <data_folder>/csv/test-clean.csv
avoid_if_longer_than: 17.0
avoid_if_shorter_than: 1.0
# Training parameters
number_of_epochs: 15
batch_size: 8
test_batch_size: 4
lr: 1.0
sorting: random
dynamic_batching: True
gradient_accumulation: 1

# dynamic batching parameters, if used
dynamic_batch_sampler:
   max_batch_len: 512000
   shuffle_ex: True
   batch_ordering: random
   num_buckets: 20

# Feature parameters
sample_rate: 16000
n_fft: 400
n_mels: 40

opt_class: !name:torch.optim.Adadelta
   lr: !ref <lr>
   rho: 0.95
   eps: 1.e-8

# Dataloader options
train_dataloader_opts:
   batch_size: !ref <batch_size>

valid_dataloader_opts:
   batch_size: !ref <batch_size>

test_dataloader_opts:
   batch_size: !ref <test_batch_size>

# Model parameters
activation: !name:torch.nn.LeakyReLU
dropout: 0.15
cnn_blocks: 2
cnn_channels: (128, 256)
inter_layer_pooling_size: (2, 2)
cnn_kernelsize: (3, 3)
time_pooling_size: 4
rnn_class: !name:speechbrain.nnet.RNN.LSTM
rnn_layers: 4
rnn_neurons: 1024
rnn_bidirectional: True
dnn_blocks: 2
dnn_neurons: 512
output_neurons: 31  # Number of tokens (same as LM)
blank_index: 0
bos_index: 0
eos_index: 0
unk_index: 0

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
   limit: !ref <number_of_epochs>

normalize: !new:speechbrain.processing.features.InputNormalization
   norm_type: global

compute_features: !new:speechbrain.lobes.features.Fbank
   sample_rate: !ref <sample_rate>
   n_fft: !ref <n_fft>
   n_mels: !ref <n_mels>

env_corrupt: !new:speechbrain.lobes.augment.EnvCorrupt
   #openrir_folder: !ref <data_folder_rirs>
   babble_prob: 0.0
   reverb_prob: 0.0
   noise_prob: 1.0
   noise_snr_low: 0
   noise_snr_high: 15

augmentation: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
   sample_rate: !ref <sample_rate>
   speeds: [95, 100, 105]

enc: !new:speechbrain.lobes.models.CRDNN.CRDNN
   input_shape: [null, null, !ref <n_mels>]
   activation: !ref <activation>
   dropout: !ref <dropout>
   cnn_blocks: !ref <cnn_blocks>
   cnn_channels: !ref <cnn_channels>
   cnn_kernelsize: !ref <cnn_kernelsize>
   inter_layer_pooling_size: !ref <inter_layer_pooling_size>
   time_pooling: True
   using_2d_pooling: False
   time_pooling_size: !ref <time_pooling_size>
   rnn_class: !ref <rnn_class>
   rnn_layers: !ref <rnn_layers>
   rnn_neurons: !ref <rnn_neurons>
   rnn_bidirectional: !ref <rnn_bidirectional>
   rnn_re_init: True
   dnn_blocks: !ref <dnn_blocks>
   dnn_neurons: !ref <dnn_neurons>
   use_rnnp: False

ctc_lin: !new:speechbrain.nnet.linear.Linear
   input_size: !ref <dnn_neurons>
   n_neurons: !ref <output_neurons>

log_softmax: !new:speechbrain.nnet.activations.Softmax
   apply_log: True

ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
   blank_index: !ref <blank_index>

tokenizer: !new:speechbrain.dataio.encoder.CTCTextEncoder

# Models
modules:
   enc: !ref <enc>
   ctc_lin: !ref <ctc_lin>
   normalize: !ref <normalize>
   env_corrupt: !ref <env_corrupt>

model: !new:torch.nn.ModuleList
   - [!ref <enc>, !ref <ctc_lin>]


lr_annealing: !new:speechbrain.nnet.schedulers.NewBobScheduler
   initial_value: !ref <lr>
   improvement_threshold: 0.0025
   annealing_factor: 0.8
   patient: 0

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
   checkpoints_dir: !ref <save_folder>
   recoverables:
      model: !ref <model>
      scheduler: !ref <lr_annealing>
      normalizer: !ref <normalize>
      counter: !ref <epoch_counter>
      tokenizer: !ref <tokenizer>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
   save_file: !ref <train_log>

error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
   split_tokens: True
acc_computer: !name:speechbrain.utils.Accuracy.AccuracyStats

# The pretrainer allows a mapping between pretrained files and instances that
# are declared in the yaml.
pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
   collect_in: !ref <tokenizers_folder>/<model_name>
   loadables:
      tokenizer: !ref <tokenizer>
   paths:
      tokenizer: !ref <pretrained_tokenizer_path>/tokenizer.ckpt
